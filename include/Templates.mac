/******************************************************************************
 *
 *  This file contains several macros for duplicating function definitions
 *  in the standard library. When modifying them you should keep in mind
 *  that these are used in several SaC modules. Among these are:
 *
 *  ScalarArith.sac
 *  ArrayBasics.sac
 *  ArrayArith.sac
 *  ArrayTransform.sac
 *
 ******************************************************************************/

/******************************************************************************
 *
 * Macros for mimicking polymorphism on elementary types....
 *
 ******************************************************************************/

#ifdef FULLTYPES

#define BUILT_IN( fun)    \
fun( byte)                \
fun( short)               \
fun( int)                 \
fun( long)                \
fun( longlong)            \
fun( ubyte)               \
fun( ushort)              \
fun( uint)                \
fun( ulong)               \
fun( ulonglong)           \
fun( float)               \
fun( double)              \
fun( bool)                \
fun( char)


#define NUM( fun)         \
fun( byte)                \
fun( short)               \
fun( int)                 \
fun( long)                \
fun( longlong)            \
fun( ubyte)               \
fun( ushort)              \
fun( uint)                \
fun( ulong)               \
fun( ulonglong)           \
fun( float)               \
fun( double)

#else

#define BUILT_IN( fun)    \
fun( int)                 \
fun( long)                \
fun( float)               \
fun( double)              \
fun( bool)                \
fun( char)


#define NUM( fun)         \
fun( int)                 \
fun( long)                \
fun( float)               \
fun( double)

#endif

#define CHAR( fun)	  \
fun( char)

/********************************************************************************
 *
 * Macros for generating MACRO calls for all arithmetic operations
 *
 ********************************************************************************/

#define MAP_ARI_OPS( ext, a)            \
MAP_BIN_##ext( +, _add_SxS_, a, a)      \
MAP_BIN_##ext( -, _sub_SxS_, a, a)      \
MAP_BIN_##ext( *, _mul_SxS_, a, a)      \
MAP_BIN_##ext( /, _div_SxS_, a, a)      \
MAP_BIN_##ext(  min, _min_SxS_, a, a)   \
MAP_BIN_##ext(  max, _max_SxS_, a, a)   \
MAP_MON_##ext( -, _neg_S_, a, a)        \
MAP_MON_##ext( abs, _abs_S_, a, a)


#define MAP_INT_OPS( ext)               \
MAP_BIN_##ext( %, _mod_SxS_, int, int) 



/********************************************************************************
 *
 * Macros for generating MACRO calls for all relational operations
 *
 ********************************************************************************/

#define MAP_REL_OPS( ext, a)            \
MAP_EQ_OPS( ext, a)                     \
MAP_COMP_OPS( ext, a)

#define MAP_EQ_OPS( ext, a)                 \
MAP_BIN_##ext( ==,  _eq_SxS_, a, bool)      \
MAP_BIN_##ext( !=, _neq_SxS_, a, bool)

#define MAP_COMP_OPS( ext, a)               \
MAP_BIN_##ext(  <,  _lt_SxS_, a, bool)      \
MAP_BIN_##ext( <=,  _le_SxS_, a, bool)      \
MAP_BIN_##ext(  >,  _gt_SxS_, a, bool)      \
MAP_BIN_##ext( >=,  _ge_SxS_, a, bool)


/********************************************************************************
 *
 * Macros for generating MACRO calls for all logic operations
 *
 ********************************************************************************/

#define MAP_LOG_OPS( ext)                   \
MAP_BIN_##ext( &, _and_SxS_, bool, bool)    \
MAP_BIN_##ext( |,  _or_SxS_, bool, bool)    \
MAP_MON_##ext( !, _not_S_, bool, bool)
