#include "Templates.mac"


/********************************************************************************
 *
 * Array-Extensions for binary monary ops
 *
 * Calls of these are created when using the macros provided in "Templates.mac"
 * such as MAP_ARI_OPS, MAP_INT_OPS, MAP_REL_OPS...
 *
 ********************************************************************************/

#define MAP_BIN_AxA( name, op, a, b)                                               \
inline                                                                             \
b[*] (name)( a[+] A, a[+] B)                                                       \
{                                                                                  \
  shp = shape( A);                                                                 \
  res = with( .<= iv <= .)                                                         \
        genarray( shp, name ( sel(iv, A), sel(iv, B)), name ( one( A), one( B)));  \
  return( res);                                                                    \
}

#define MAP_BIN_AxS( name, op, a, b)                                   \
inline                                                                 \
b[*] (name)( a[+] A, a B)                                              \
{                                                                      \
  shp = shape( A);                                                     \
  res = with( .<= iv <= .)                                             \
        genarray( shp, name ( sel(iv, A), B), name( one( A), one( B)));\
  return( res);                                                        \
}

#define MAP_BIN_SxA( name, op, a, b)                                   \
inline                                                                 \
b[*] (name)( a A, a[+] B)                                              \
{                                                                      \
  shp = shape( B);                                                     \
  res = with( .<= iv <= .)                                             \
        genarray( shp, name ( A, sel(iv, B)), name( one( A), one( B)));\
  return( res);                                                        \
}

/********************************************************************************
 *
 * Array-Extensions for monadic ops
 *
 ********************************************************************************/

#define MAP_MON_AxA( name, op, a, b)                        \
inline                                                      \
b[*] (name)( a[+] A)                                        \
{                                                           \
  shp = shape( A);                                          \
  res = with( .<= iv <= .)                                  \
        genarray( shp, name ( sel(iv, A)), name( zero( A)));\
  return( res);                                             \
}

#define MAP_MON_SxA( name, op, a, b)
#define MAP_MON_AxS( name, op, a, b)




/** <!--********************************************************************-->
 *
 * AriOPS on arrays (see Templates.mac for details)
 *
 ******************************************************************************/

#define ARI_OPS_A( a)                \
MAP_ARI_OPS( AxA, a)                 \
MAP_ARI_OPS( SxA, a)                 \
MAP_ARI_OPS( AxS, a)



/** <!--********************************************************************-->
 *
 * RelOPS on arrays (see Templates.mac for details)
 *
 ******************************************************************************/

#define REL_OPS_A( a)                \
EQ_OPS_A( a)                         \
COMP_OPS_A( a)

#define EQ_OPS_A( a)                 \
MAP_EQ_OPS( AxA, a)                  \
MAP_EQ_OPS( SxA, a)                  \
MAP_EQ_OPS( AxS, a)

#define COMP_OPS_A( a)               \
MAP_COMP_OPS( AxA, a)                \
MAP_COMP_OPS( SxA, a)                \
MAP_COMP_OPS( AxS, a)





/********************************************************************************
 *
 * Structural OPS
 *
 ********************************************************************************/

#define TAKE( a)                                                                 \
inline                                                                           \
a[*] take( int[.] v, a[*] array)                                                 \
{                                                                                \
  vext = _cat_VxV_( v, _drop_SxV_( _sel_( [0], _shape_( v)), shape( array)));    \
  start = ArrayTransform::where( ArrayArith::<( vext, 0),                        \
            ArrayArith::max( ArrayArith::-( _add_AxA_( shape(array), vext)),0),  \
            0);                                                                  \
  stop = ArrayTransform::where( ArrayArith::<(vext, 0),                          \
           ArrayArith::abs(vext),                                                \
           ArrayArith::min( ArrayArith::abs(vext), shape(array)));               \
  offset = ArrayTransform::where( ArrayArith::<( vext, 0),                       \
             _add_AxA_( shape(array), vext),                                     \
             0);                                                                 \
  res = with( start <= iv < stop )                                               \
        genarray( ArrayArith::abs(vext),                                         \
                  sel( _add_AxA_( offset, iv), array),                           \
                  zero(array));                                                  \
  return( res);                                                                  \
}

/*----------------------------------------------------------------------------*/

#define DROP( a)                                                                  \
inline                                                                            \
a[*] drop( int[.] v, a[*] array)                                                  \
{                                                                                 \
  vext = _cat_VxV_( v,                                                            \
                    ArrayBasics::genarray( [_sub_SxS_( dim( array),               \
                                             _sel_( [0], _shape_( v)))],          \
                                           0));                                   \
  new_shp = _sub_AxA_( shape( array), ArrayArith::abs( vext));                    \
  new_shp = ArrayTransform::where( new_shp ArrayArith::< 0, 0, new_shp);          \
  offset = ArrayTransform::where( vext ArrayArith::< 0, 0, vext);                 \
  offset = ArrayTransform::where( offset ArrayArith::< shape( array), offset, 0); \
  res = with( . <= iv <= .)                                                       \
        genarray( new_shp, sel( _add_AxA_( offset, iv), array), zero(array));     \
  return( res);                                                                   \
}


/*----------------------------------------------------------------------------*/

#define TILE( a)                                                          \
inline                                                                    \
a[*] tile( int[.] shp, int[.] idx, a[*] array)                            \
{                                                                         \
  res = with( . <= iv <= .)                                               \
        genarray( shp, sel( _add_AxA_( idx, iv), array), zero( array));   \
  return( res);                                                           \
}

/*----------------------------------------------------------------------------*/

#define CAT( a)                                                             \
inline                                                                      \
a[*] (++)( a[+] arr_a, a[+] arr_b)                                          \
{                                                                           \
  new_shp = _modarray_( shape( arr_a),                                      \
                        [0],                                                \
                        _add_SxS_( _sel_([0], shape( arr_a)),               \
                                   _sel_([0], shape( arr_b)) ) );           \
  res = with( _mul_SxA_(0, new_shp) <= iv < shape( arr_a))                  \
        genarray( new_shp, sel( iv, arr_a), zero( arr_a));                  \
  offset =  _modarray_( _mul_SxA_( 0, new_shp),                             \
                        [0],                                                \
                        _sel_([0], shape( arr_a)) );                        \
  res = with( offset <= iv <= shape( res))                                  \
        modarray( res, iv, sel( _sub_AxA_( iv, offset), arr_b));            \
  return( res);                                                             \
}

/*----------------------------------------------------------------------------*/

#define REVERSE( a)                                                         \
inline                                                                      \
a[*] (reverse)( a[+] arr_a)                                                 \
{                                                                           \
  maxidx0 = _sub_SxS_( _sel_( [0], shape( arr_a)), 1);                      \
  res = with( [0] <= iv = [i] <= [maxidx0])                                 \
        modarray( arr_a, iv, arr_a[[_sub_SxS_(maxidx0, i)]]);               \
  return( res);                                                             \
}

/*----------------------------------------------------------------------------*/

#define SHIFT_S( a)                                                           \
inline                                                                        \
a[*] shift (int dimension, int count, a boundary, a[+] A)                     \
{                                                                             \
  if (count ScalarArith::== 0) {                                              \
    result = A;                                                               \
  } else {                                                                    \
    max_shift = _sel_( [dimension], shape(A));                                \
                                                                              \
    if (count ScalarArith::> 0) {                                             \
      count = _min_( count, max_shift);                                       \
      offset = _modarray_( _mul_SxA_( 0, shape(A)), [dimension], count);      \
      lb = offset;                                                            \
      ub = shape(A);                                                          \
    } else {                                                                  \
      count = _max_( count, _neg_(max_shift));                                \
      offset = _modarray_( _mul_SxA_( 0, shape(A)), [dimension], count);      \
      lb = _mul_SxA_( 0, shape(A));                                           \
      ub = _add_AxA_( shape(A), offset);                                      \
    }                                                                         \
                                                                              \
    result = with (. <= iv <= .)                                              \
             genarray( shape(A), boundary, zero(A));                          \
                                                                              \
    result = with (lb <= iv < ub) {                                           \
               array_elem = sel( _sub_AxA_( iv, offset), A);                  \
             } modarray( result, iv, array_elem);                             \
  }                                                                           \
  return(result);                                                             \
}

#define SHIFT_V( a)                                                \
inline                                                             \
a[*] shift (int[.] counts, a boundary, a[+] A)                     \
{                                                                  \
                                                                   \
  for( i=0;                                                        \
       i ScalarArith::<_sel_( [0], _shape_(counts));               \
       i=i ScalarArith::+1) {                                      \
    offset = _sel_([i], counts);                                   \
    A = shift( i, offset, boundary, A);                            \
  }                                                                \
                                                                   \
  return(A);                                                       \
}

#define SHIFT_V_Z( a)                               \
inline                                              \
a[*] shift (int[.] counts, a[+] A)                  \
{                                                   \
  return( shift ( counts, zero(A), A));             \
}


#define SHIFT( a)  \
SHIFT_S( a)        \
SHIFT_V( a)        \
SHIFT_V_Z( a)

/*----------------------------------------------------------------------------*/

#define ROTATE_S( a)                                                       \
inline                                                                     \
a[+] rotate (int dimension, int count, a[+] A)                             \
{                                                                          \
  a array_elem;                                                            \
                                                                           \
  if(count ScalarArith::== 0) {                                            \
    result = A;                                                            \
  } else {                                                                 \
    max_rotate = _sel_( [dimension], shape(A));                            \
    if( _eq_( max_rotate, 0)) {                                            \
      result = A;                                                          \
    } else {                                                               \
      count = _mod_( count, max_rotate);                                   \
      if (_lt_(count, 0)) {                                                \
        count = _add_SxS_( count, max_rotate);                             \
      }                                                                    \
                                                                           \
      offset = _modarray_( _mul_SxA_( 0, shape(A)), [dimension], count);   \
      slice_shp = _modarray_(shape(A), [dimension], count);                \
                                                                           \
      result = with (offset <= iv <= .) {                                  \
                 array_elem = sel(_sub_AxA_(iv,offset), A);                \
               }                                                           \
               modarray( A, iv, array_elem);                               \
                                                                           \
      result = with (. <= iv <  slice_shp) {                               \
                 array_elem = sel(shape(A)                                 \
                                  ArrayArith::- slice_shp                  \
                                  ArrayArith::+iv, A);                     \
               }                                                           \
               modarray( result, iv, array_elem);                          \
    }                                                                      \
  }                                                                        \
  return(result);                                                          \
}

#define ROTATE_V( a)                                                   \
inline                                                                 \
a[*] rotate (int[.] counts,  a[+] A)                                   \
{                                                                      \
  int offset;                                                          \
                                                                       \
  for( i=0; _lt_(i, _sel_( [0], _shape_(counts))); i=_add_SxS_(i,1)) { \
    offset = _sel_( [i], counts);                                      \
    A = rotate( i, offset, A);                                         \
  }                                                                    \
                                                                       \
  return(A);                                                           \
}

#define ROTATE( a)  \
ROTATE_S( a)        \
ROTATE_V( a)

