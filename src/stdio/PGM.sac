module PGM;

use String: { string };
use ArrayBasics: { shape };

export { readPGM, writePGM };

external int[.,.], int readPGM( string fn );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "read_pgm"
    #pragma refcounting[0]
    /*
     * Read a PGM image from file 'fn'.
     * Return:
     *     - the data as a two dimensional int array
     *     - the maximum pixel value in the range [1, 65535].
     *       Often the maximum pixel value is 255, but not always.
     */


external void writePGM(int[.,.] image, int[2] shape, bool binary, string name);
    #pragma effect   FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/array2pgm.o"
    #pragma linkname "write_pgm"
    /*
     * Write an image to file using the PGM image format.
     * The parameter 'shape' gives the dimensions.
     * The parameter 'binary' specifies binary mode if true, else text mode.
     * The parameter 'name' gives the filename.
     */


/*
 * Write an image to file in the PGM format.
 */
inline void writePGM(int[.,.] img, bool binary, string filename)
{
    writePGM(img, shape(img), binary, filename);
}


/*
 * Write an image to file in the binary PGM format.
 */
inline void writePGM(int[.,.] img, string filename)
{
    writePGM(img, shape(img), true, filename);
}


