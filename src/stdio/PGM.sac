module PGM;

use ArrayBasics: {shape};
use String: {string};

export {readPGM, printPGM};

external int[.,.] readArray( string name );
#pragma effect FileSystem::TheFileSystem
#pragma linkobj "src/PGM/pgm2array.o"
#pragma linkname "SAC_PGM_pgm2array"
#pragma refcounting[0]

external void writeArray( string name, int[.,.] image, int[2] shape, int ascii);
#pragma effect FileSystem::TheFileSystem
#pragma linkobj "src/PGM/array2pgm.o"
#pragma linkname "SAC_PGM_array2pgm"

/*
 * Read PGM image from file
 */
inline
int[.,.] readPGM(string name) 
{
  ret = readArray( name);
  return (ret);
}

/*
 * Backwards compatibility, read from stdin
 */
inline
int[.,.] readPGM() 
{
  ret = readArray( "stdin");
  return (ret);
}

/*
 * Backwards compatibility, write ascii data to stdout
 */
inline
void printPGM( int[.,.] img)
{
  writeArray( "stdout", img, shape(img), 1);
}

/*
 * Write PGM image to file.
 * One can choose for ascii or binary output
 */
inline
void printPGM( int[.,.] img, string name, bool binary)
{
  if ( binary) {
    writeArray( name, img, shape(img), 0);
  } else {
    writeArray( name, img, shape(img), 1);
  }
}

