class PGM;

external classtype;

use String:       { string };
use ArrayBasics:  { shape };
use File:         { File, fopen, fclose };
use SysErr:       { fail };
use RuntimeError: { error };
use ScalarArith:  { == };

export all;

int[.,.], int readPGM( string filename )
{
  pgm = openPGM( filename );
  maxval = PGMmaxval( pgm );
  data = PGMdata( pgm );
  fp = PGMstream( pgm );
  closePGM( pgm );
  fclose( fp );
  return (data, maxval);
}
    /*
     * Read a PGM image from file 'filename'.
     * Return:
     *     - the data as a two dimensional int array
     *     - the maximum pixel value in the range [1, 65535].
     *       Usually the maximum pixel value is 255,
     *       but for 16-bit images it is 65535.
     *       In very rare cases it has another value.
     */

PGM openPGM( string fn )
{
  err, fp = fopen( fn, "rb");
  if (fail(err) == true) {
    error( (:int)err, "openPGM: Failed to open file %s for reading",
           fn);
  }
  return openPGMstream( fp);
}
    /*
     * Open a PGM file using filename 'fn' and read the PGM header.
     */

external PGM openPGMstream( File& fp );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "SAC_PGM_open"
    #pragma linksign [0,1]
    /*
     * Read the PGM header from an open file stream.
     */

external void closePGM( PGM& pgm );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "SAC_PGM_close"
    /*
     * Free the internal PGM data structure.
     */

external int PGMwidth( PGM& pgm );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "SAC_PGM_width"
    #pragma linksign [0,1]
    /*
     * Extract the width of the PGM image.
     */

external int PGMheight( PGM& pgm );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "SAC_PGM_height"
    #pragma linksign [0,1]
    /*
     * Extract the height of the PGM image.
     */

external int PGMmaxval( PGM& pgm );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "SAC_PGM_maxval"
    #pragma linksign [0,1]
    /*
     * Extract the maximum possible pixel value of the PGM image.
     */

external int[.,.] PGMdata( PGM& pgm );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "SAC_PGM_data"
    #pragma refcounting [0]
    /*
     * Read the pixel data from file and return it as an image.
     */

external File PGMstream( PGM& pgm );
    #pragma effect    FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/pgm2array.o"
    #pragma linkname "SAC_PGM_stream"
    #pragma linksign [0,1]
    /*
     * Extract the file pointer from the PGM data structure.
     */


external void writePGM(int[.,.] image, int[2] shape, bool binary, string name);
    #pragma effect   FileSystem::TheFileSystem
    #pragma linkobj  "src/PGM/array2pgm.o"
    #pragma linkname "write_pgm"
    /*
     * Write an image to file using the PGM image format.
     * The parameter 'shape' gives the dimensions.
     * The parameter 'binary' specifies binary mode if true, else text mode.
     * The parameter 'name' gives the filename.
     */


/*
 * Write an image to file in the PGM format.
 */
inline void writePGM(int[.,.] img, bool binary, string filename)
{
    writePGM(img, shape(img), binary, filename);
}


/*
 * Write an image to file in the binary PGM format.
 */
inline void writePGM(int[.,.] img, string filename)
{
    writePGM(img, shape(img), true, filename);
}


