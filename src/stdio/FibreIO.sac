module FibreIO;


use IOresources: all;
use Array : { shape, sel, dim };
use String: all except {sel, shape};

export all;

/*****************************************************************
 * FibreScan on File
 */

external  int    FibreScanInt( File &stream);
  #pragma linksign[0,1]
  #pragma linkobj "src/FibreIO/ScanInt.o"
  #pragma linkobj "src/FibreIO/lex.FibreScan.o"
  #pragma linkobj "src/FibreIO/FibreScan.tab.o"

external  float  FibreScanFloat( File &stream);
  #pragma linksign[0,1]
  #pragma linkobj "src/FibreIO/ScanFlt.o"

external  double FibreScanDouble( File &stream);
  #pragma linksign[0,1]
  #pragma linkobj "src/FibreIO/ScanDbl.o"

external  int[*]  FibreScanIntArray( File &stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanIntArr.o"

external  float[*]  FibreScanFloatArray( File &stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanFltArr.o"

external  double[*]  FibreScanDoubleArray( File &stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanDblArr.o"

/*****************************************************************
 * FibreScan on TermFile
 */

external  int    FibreScanInt( TermFile &stream);
  #pragma linksign[0,1]
  #pragma linkobj "src/FibreIO/ScanInt.o"
  #pragma linkobj "src/FibreIO/lex.FibreScan.o"
  #pragma linkobj "src/FibreIO/FibreScan.tab.o"

external  float  FibreScanFloat( TermFile &stream);
  #pragma linksign[0,1]
  #pragma linkobj "src/FibreIO/ScanFlt.o"

external  double FibreScanDouble( TermFile &stream);
  #pragma linksign[0,1]
  #pragma linkobj "src/FibreIO/ScanDbl.o"

external  int[*]  FibreScanIntArray( TermFile &stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanIntArr.o"


external  float[*]  FibreScanFloatArray( TermFile &stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanFltArr.o"

external  double[*]  FibreScanDoubleArray( TermFile &stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanDblArr.o"

/*****************************************************************
 * FibreScan on String
 */

external  int[*]  FibreScanIntArrayStr( string stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanIntArr.o"

external  float[*]  FibreScanFloatArrayStr( string stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanFltArr.o"

external  double[*]  FibreScanDoubleArrayStr( string stream);
  #pragma refcounting [0]
  #pragma linksign[1,2]
  #pragma linkobj "src/FibreIO/ScanDblArr.o"

/*****************************************************************
 * FibrePrint on File
 */

external void FibrePrint( File &stream, int DIM, int[+] SHAPE, int[+] ARRAY);
  #pragma linkname "FibrePrintIntArray"
  #pragma linkobj "src/FibreIO/FibrePrint.o"

external void FibrePrint( File &stream, int DIM, int[+] SHAPE, float[+] ARRAY);
  #pragma linkname "FibrePrintFloatArray"
  #pragma linkobj "src/FibreIO/FibrePrint.o"

external void FibrePrint( File &stream, int DIM, int[+] SHAPE, double[+] ARRAY);
  #pragma linkname "FibrePrintDoubleArray"
  #pragma linkobj "src/FibreIO/FibrePrint.o"


/*****************************************************************
 * FibrePrint on TermFile
 */

external void FibrePrint( TermFile &stream, int DIM, int[+] SHAPE, int[+] ARRAY);
  #pragma linkname "FibrePrintIntArray"
  #pragma linkobj "src/FibreIO/FibrePrint.o"

external void FibrePrint( TermFile &stream, int DIM, int[+] SHAPE, float[+] ARRAY);
  #pragma linkname "FibrePrintFloatArray"
  #pragma linkobj "src/FibreIO/FibrePrint.o"

external void FibrePrint( TermFile &stream, int DIM, int[+] SHAPE, double[+] ARRAY);
  #pragma linkname "FibrePrintDoubleArray"
  #pragma linkobj "src/FibreIO/FibrePrint.o"




/*****************************************************************/
/*****************************************************************/



int[*]  FibreScanIntArray()
{
  return( FibreScanIntArray( stdin));
}


/*****************************************************************/

float[*]  FibreScanFloatArray()
{
  return( FibreScanFloatArray( stdin));
}



/*****************************************************************/


double[*]  FibreScanDoubleArray()
{
  return( FibreScanDoubleArray( stdin));
}


/*****************************************************************/
/*****************************************************************/
/*****************************************************************/



inline void FibrePrint(File &stream, int[+] arr)
{
  FibrePrint(stream, dim(arr), shape(arr), arr);
}

inline void FibrePrint(File &stream, int arr)
{
  File::fprintf(stream, "%d\n", arr);
}

/*****************************************************************/


inline void FibrePrint(File &stream, float[+] arr)
{
  FibrePrint(stream, dim(arr), shape(arr), arr);
}


inline void FibrePrint(File &stream, float arr)
{
  File::fprintf(stream, "%.16f\n", arr);
}

/*****************************************************************/


inline void FibrePrint(File &stream, double[+] arr)
{
  FibrePrint(stream, dim(arr), shape(arr), arr);
}

inline void FibrePrint(File &stream, double arr)
{
  File::fprintf(stream, "%.16f\n", arr);
}

/*****************************************************************/
/*****************************************************************/


inline void FibrePrint(TermFile &stream, int[+] arr)
{
  FibrePrint(stream, dim(arr), shape(arr), arr);
}

inline void FibrePrint(TermFile &stream, int arr)
{
  TermFile::fprintf(stream, "%d\n", arr);
}

/*****************************************************************/


inline void FibrePrint(TermFile &stream, float[+] arr)
{
  FibrePrint(stream, dim(arr), shape(arr), arr);
}

inline void FibrePrint(TermFile &stream, float arr)
{
  TermFile::fprintf(stream, "%.16f\n", arr);
}

/*****************************************************************/


inline void FibrePrint(TermFile &stream, double[+] arr)
{
  FibrePrint(stream, dim(arr), shape(arr), arr);
}

inline void FibrePrint(TermFile &stream, double arr)
{
  TermFile::fprintf(stream, "%.16f\n", arr);
}


/*****************************************************************/
/*****************************************************************/


inline void FibrePrint(int[+] arr)
{
  FibrePrint(stdout, dim(arr), shape(arr), arr);
}

inline void FibrePrint(int arr)
{
  TermFile::fprintf(stdout, "%d\n", arr);
}

/*****************************************************************/


inline void FibrePrint(float[+] arr)
{
  FibrePrint(stdout, dim(arr), shape(arr), arr);
}

inline void FibrePrint(float arr)
{
  TermFile::fprintf(stdout, "%.16f\n", arr);
}

/*****************************************************************/


inline void FibrePrint(double[+] arr)
{
  FibrePrint(stdout, dim(arr), shape(arr), arr);
}

inline void FibrePrint(double arr)
{
  TermFile::fprintf(stdout, "%.16f\n", arr);
}

/*****************************************************************/
/*****************************************************************/
/*****************************************************************/


