class TermFile;

external classtype;

use String : {string};
use Terminal : { TheTerminal };

export all;

external objdef TermFile stdin;
    #pragma linkname "SACstdin"

external objdef TermFile stdout;
    #pragma linkname "SACstdout"

external objdef TermFile stderr;
    #pragma linkname "SACstderr"



  /*
   *  Each function of class TermFile exists in two versions. One expects
   *  an I/O stream as an explicit argument, the other writes implicitly
   *  to stdout or reads implicitly from stdin, respectively.
   */



  /*
   *  Functions for low-level input / output operations
   */


external void fputc(char C, TermFile &STREAM);
    #pragma effect TheTerminal
external void  putc(char C);
    #pragma effect TheTerminal, stdout
    #pragma linkname "SACputc"
    #pragma linkobj "src/TermFile/putget.o"
    /*
     * Put the character C to the output stream STREAM which must be
     * either stdout or stderr.
     */


external char fgetc(TermFile &STREAM);
    #pragma effect TheTerminal
external char  getc();
    #pragma effect TheTerminal, stdin
    #pragma linkname "SACgetc"
    #pragma linkobj "src/TermFile/putget.o"
    /*
     * Get the next character from the input stream STREAM which must
     * be stdin.
     */


external void ungetc(char C, TermFile &STREAM);
    #pragma effect TheTerminal
external void ungetc(char C);
    #pragma effect TheTerminal, stdin
    #pragma linkname "SACungetc"
    #pragma linkobj "src/TermFile/putget.o"
    /*
     * Put the character C back to the input stream STREAM 
     * which must be stdin for further read operations.
     * Only one character may be put back between two
     * consecutive read operations, otherwise the character put back first
     * is overwritten.
     */



  /*
   *  Functions for formatted input / output operations
   */


external void fprintf(TermFile &STREAM, string FORMAT, ...);
    #pragma effect TheTerminal
    #pragma linkname "SACfprintf_TF"
    #pragma linkobj "src/TermFile/fprintf.o"
external void  printf(string FORMAT, ...);
    #pragma effect TheTerminal, stdout
    #pragma linkname "SACprintf"
    #pragma linkobj "src/TermFile/printf.o"
    /*
     * Print formatted output to STREAM which must be open for writing.
     * The syntax of format strings is identical to that known from C.
     * This function may be used to print values of types
     * char, string, int, float, and double. 
     */


external int, ... fscanf(TermFile &STREAM, string FORMAT);
    #pragma effect TheTerminal
external int, ...  scanf(string FORMAT);
    #pragma effect TheTerminal, stdin
    /*
     * Scan the given stream STREAM concerning the format string FORMAT.
     * The syntax of format strings is identical to C except that the
     * string conversion specifier %s is not supported. 
     * This function may be used to scan values of types
     * char, int, float, and double. To scan strings use either fscans
     * or fscanl, respectively.
     * The int result gives the number of successfully performed 
     * conversions.
     */

      
external string fscans(TermFile &STREAM, int MAX);
    #pragma effect TheTerminal
    #pragma linkname "term_fscans"
    #pragma linkobj "src/TermFile/fscans.o"
external string  scans(int MAX);
    #pragma effect TheTerminal, stdin
    #pragma linkname "term_scans"
    #pragma linkobj "src/TermFile/scans.o"
     /*
      * Read the next character string from the input stream STREAM. Strings
      * are delimited by any whitespace character including the 
      * end-of-file symbol. Always read at most MAX characters.
      * Upon failure an empty string is returned.
      */


external string fscanl(TermFile &STREAM, int MAX);
    #pragma effect TheTerminal
    #pragma linkname "term_fscanl"
    #pragma linkobj "src/TermFile/fscanl.o"
external string  scanl(int MAX);
    #pragma effect TheTerminal, stdin
    #pragma linkname "term_scanl"
    #pragma linkobj "src/TermFile/scanl.o"
     /*
      * Read the next line from the input stream STREAM. Lines are character
      * strings delimited by any new-line or end-of-file symbol.
      * Always read at most MAX characters.
      * Upon failure an empty string is returned.
      */




  /*
   *  Miscellaneous functions for operating on standard I/O streams
   */


external void fflush(TermFile &STREAM);
    #pragma effect TheTerminal
external void  flush();
    #pragma effect TheTerminal, stdout
    #pragma linkname "SACflush"
    #pragma linkobj "src/TermFile/flush.o"
    /*
     * Write the buffer of a buffered output stream STREAM which must be 
     * either stdout or stderr to the respective file or terminal device.
     */
 

external bool feof(TermFile &STREAM);
    #pragma effect TheTerminal
external bool  eof();
    #pragma effect TheTerminal, stdin
    #pragma linkname "SACeof"
    #pragma linkobj "src/TermFile/eof.o"
    /*
     * Test the stream STREAM for having reached the end of the respective 
     * file. This function is useful if standard I/O streams are redirected
     * to or from files.
     */


