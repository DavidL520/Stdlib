module ComplexIO;


/*****************************************************************/


use IOresources: all;
use String: { string, to_string};
use Complex: { complex, imag, real, toc};
use ScalarArith : { == };
use TermFile : {TermFile};

export all;


/*****************************************************************/

inline void fprint(File &stream, complex c)
{
  File::fprintf(stream, "(%g,%g)", real(c), imag(c));
}


/*****************************************************************/

inline void fprint(File &stream, complex c, int mode)
{
  if (mode==2)
  {
    File::fprintf(stream, "%g %g", real(c), imag(c));
  }
  else
  {
    if (mode==1)
    {
      File::fprintf(stream, "%g+%gi", real(c), imag(c));
    }
    else
    {
      File::fprintf(stream, "(%g, %g)", real(c), imag(c));
    }
  }
}


/*****************************************************************/

inline void fprint(File &stream, complex c, int mode, int prec)
{
  if (mode==2)
  {
    File::fprintf(stream, "%.*g %.*g", prec, real(c), prec, imag(c));
  }
  else
  {
    if (mode==1)
    {
      File::fprintf(stream, "%.*g+%.*gi", prec, real(c), prec, imag(c));
    }
    else
    {
      File::fprintf(stream, "(%.*g, %.*g)", prec, real(c), prec, imag(c));
    }
  }
}


/*****************************************************************/
/*****************************************************************/


inline void fprint(TermFile &stream, complex c)
{
  TermFile::fprintf(stream, "(%g,%g)", real(c), imag(c));
}


/*****************************************************************/

inline void fprint(TermFile &stream, complex c, int mode)
{
  if (mode==2)
  {
    TermFile::fprintf(stream, "%g %g", real(c), imag(c));
  }
  else
  {
    if (mode==1)
    {
      TermFile::fprintf(stream, "%g+%gi", real(c), imag(c));
    }
    else
    {
      TermFile::fprintf(stream, "(%g, %g)", real(c), imag(c));
    }
  }
}


/*****************************************************************/

inline void fprint(TermFile &stream, complex c, int mode, int prec)
{
  if (mode==2)
  {
    TermFile::fprintf(stream, "%.*g %.*g", prec, real(c), prec, imag(c));
  }
  else
  {
    if (mode==1)
    {
      TermFile::fprintf(stream, "%.*g+%.*gi", prec, real(c), prec, imag(c));
    }
    else
    {
      TermFile::fprintf(stream, "(%.*g, %.*g)", prec, real(c), prec, imag(c));
    }
  }
}


/*****************************************************************/
/*****************************************************************/

inline void print(complex c)
{
  TermFile::printf("(%g,%g)", real(c), imag(c));
}


/*****************************************************************/

inline void print(complex c, int mode)
{
  if (mode==2)
  {
    TermFile::printf("%g %g", real(c), imag(c));
  }
  else
  {
    if (mode==1)
    {
      TermFile::printf("%g+%gi", real(c), imag(c));
    }
    else
    {
      TermFile::printf("(%g, %g)", real(c), imag(c));
    }
  }
}


/*****************************************************************/

inline void print(complex c, int mode, int prec)
{
  if (mode==2)
  {
    TermFile::printf("%.*g %.*g", prec, real(c), prec, imag(c));
  }
  else
  {
    if (mode==1)
    {
      TermFile::printf("%.*g+%.*gi", prec, real(c), prec, imag(c));
    }
    else
    {
      TermFile::printf("(%.*g, %.*g)", prec, real(c), prec, imag(c));
    }
  }
}



/*****************************************************************/
/*****************************************************************/
/*****************************************************************/

#define BUG197FIXED

/*
 * According to Bugzilla bug #197 has been fixed in revision 14584.
 * Hence, I try to reactivate this here.
 */

#ifdef BUG197FIXED

inline bool, complex fscancomplex(File &stream)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  success, re, im=File::fscanf(stream, "(%lf,%lf)");
  
  return(success==2, toc(re, im));
}


/*****************************************************************/


inline bool, complex fscancomplex(File &stream, int mode)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  if (mode==2)
  {
    success, re, im=File::fscanf(stream, "%lf %lf");
  }
  else
  {
    if (mode==1)
    {
      success, re, im=File::fscanf(stream, "%lf+%lfi");
    }
    else
    {
      success, re, im=File::fscanf(stream, "(%lf,%lf)");
    }
  }

  
  return(success==2, toc(re, im));
}


/*****************************************************************/
/*****************************************************************/


inline bool, complex fscancomplex(TermFile &stream)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  success, re, im=TermFile::fscanf(stream, "(%lf,%lf)");
  
  return(success==2, toc(re, im));
}


/*****************************************************************/


inline bool, complex fscancomplex(TermFile &stream, int mode)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  if (mode==2)
  {
    success, re, im=TermFile::fscanf(stream, "%lf %lf");
  }
  else
  {
    if (mode==1)
    {
      success, re, im=TermFile::fscanf(stream, "%lf+%lfi");
    }
    else
    {
      success, re, im=TermFile::fscanf(stream, "(%lf,%lf)");
    }
  }

  
  return(success==2, toc(re, im));
}


/*****************************************************************/
/*****************************************************************/


inline bool, complex scancomplex()
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  success, re, im=TermFile::scanf("(%lf,%lf)");
  
  return(success==2, toc(re, im));
}


/*****************************************************************/


inline bool, complex scancomplex(int mode)
{
  double re;
  double im;

  re=0.0d;
  im=0.0d;

  if (mode==2)
  {
    success, re, im=TermFile::scanf("%lf %lf");
  }
  else
  {
    if (mode==1)
    {
      success, re, im=TermFile::scanf("%lf+%lfi");
    }
    else
    {
      success, re, im=TermFile::scanf("(%lf,%lf)");
    }
  }

  
  return(success==2, toc(re, im));
}

#endif /* BUG197FIXED */

/*****************************************************************/
/*****************************************************************/



