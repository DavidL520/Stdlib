module ScalarIO;

use IOresources: all;
use String : { string, to_string, strlen };
use ScalarArith : all;
use ArrayFormat: all;
use TermFile: {TermFile};

export all;

#define QUOTE(s) #s

#define FPRINT_FILE_S_( typ, format)                 \
inline void fprint(File &stream, typ n)              \
{                                                    \
  File::fprintf(stream, QUOTE(%format), n);          \
}

FPRINT_FILE_S_(int, d)
FPRINT_FILE_S_(long, ld)
FPRINT_FILE_S_(char, c)
FPRINT_FILE_S_(string, s)

#ifdef FULLTYPES
FPRINT_FILE_S_(short, hd)
FPRINT_FILE_S_(byte, x)
FPRINT_FILE_S_(longlong, lld)
FPRINT_FILE_S_(ushort, hu)
FPRINT_FILE_S_(ubyte, X)
FPRINT_FILE_S_(uint, u)
FPRINT_FILE_S_(ulong, lu)
FPRINT_FILE_S_(ulonglong, llu)
#endif /* FULLTYPES */

/* fprint functions for float, double, and bool
 * we need to handle these seperately
 */

inline void fprint(File &stream, float n)
{
  File::fprintf(stream, "%g", tod(n));
}

inline void fprint(File &stream, float n, int prec)
{
  File::fprintf(stream, "%.*g", prec, tod(n));
}

inline void fprint(File &stream, double n)
{
  File::fprintf(stream, "%g", n);
}

inline void fprint(File &stream, double n, int prec)
{
  File::fprintf(stream, "%.*g", prec, n);
}

inline void fprint(File &stream, bool n)
{
  File::fprintf(stream, n ? "1" : "0");
}

inline void fprint(File &stream, bool n, int mode)
{
  if (n)
  {
     if (mode==2)
     {
	File::fprintf(stream, "true");
     }
     else
     {
       if (mode==1)
       {
	 File::fprintf(stream, "t");
       }
       else
       {
	 File::fprintf(stream, "1");
       }
     }
  }
  else
  {
     if (mode==2)
     {
	File::fprintf(stream, "false");
     }
     else
     {
       if (mode==1)
       {
	 File::fprintf(stream, "f");
       }
       else
       {
	 File::fprintf(stream, "0");
       }
     }
  }
}

#define FPRINT_TERMFILE_S_( typ, format)             \
inline void fprint(TermFile &stream, typ n)          \
{                                                    \
  TermFile::fprintf(stream, QUOTE(%format), n);      \
}

FPRINT_TERMFILE_S_(int, d)
FPRINT_TERMFILE_S_(long, ld)
FPRINT_TERMFILE_S_(char, c)
FPRINT_TERMFILE_S_(string, s)

#ifdef FULLTYPES
FPRINT_TERMFILE_S_(short, hd)
FPRINT_TERMFILE_S_(byte, x)
FPRINT_TERMFILE_S_(longlong, lld)
FPRINT_TERMFILE_S_(ushort, hu)
FPRINT_TERMFILE_S_(ubyte, X)
FPRINT_TERMFILE_S_(uint, u)
FPRINT_TERMFILE_S_(ulong, lu)
FPRINT_TERMFILE_S_(ulonglong, llu)
#endif /* FULLTYPES */

/* fprint functions for float, double, and bool
 * we need to handle these seperately
 */

inline void fprint(TermFile &stream, float n)
{
  TermFile::fprintf(stream, "%g", tod(n));
}

inline void fprint(TermFile &stream, float n, int prec)
{
  TermFile::fprintf(stream, "%.*g", prec, tod(n));
}

inline void fprint(TermFile &stream, double n)
{
  TermFile::fprintf(stream, "%g", n);
}

inline void fprint(TermFile &stream, double n, int prec)
{
  TermFile::fprintf(stream, "%.*g", prec, n);
}

inline void fprint(TermFile &stream, bool n)
{
  TermFile::fprintf(stream, n ? "1" : "0");
}

inline void fprint(TermFile &stream, bool n, int mode)
{
  if (n)
  {
     if (mode==2)
     {
	TermFile::fprintf(stream, "true");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::fprintf(stream, "t");
       }
       else
       {
	 TermFile::fprintf(stream, "1");
       }
     }
  }
  else
  {
     if (mode==2)
     {
	TermFile::fprintf(stream, "false");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::fprintf(stream, "f");
       }
       else
       {
	 TermFile::fprintf(stream, "0");
       }
     }
  }
}

#define SHOW_TERMFILE_S_( typ)                       \
inline void show( typ n)                             \
{                                                    \
  fprint(TermFile::stdout, n);                       \
}

SHOW_TERMFILE_S_(int)
SHOW_TERMFILE_S_(long)
SHOW_TERMFILE_S_(char)
SHOW_TERMFILE_S_(float)
SHOW_TERMFILE_S_(double)
SHOW_TERMFILE_S_(bool)
SHOW_TERMFILE_S_(string)

#ifdef FULLTYPES
SHOW_TERMFILE_S_(short)
SHOW_TERMFILE_S_(byte)
SHOW_TERMFILE_S_(longlong)
SHOW_TERMFILE_S_(ushort)
SHOW_TERMFILE_S_(ubyte)
SHOW_TERMFILE_S_(uint)
SHOW_TERMFILE_S_(ulong)
SHOW_TERMFILE_S_(ulonglong)
#endif /* FULLTYPES */

#define PRINT_TERMFILE_S_(typ, format)               \
inline void print( typ n)                            \
{                                                    \
  TermFile::printf("Dimension:  0\nShape    : < >\n");\
  TermFile::printf( " " QUOTE(%format\n), n);        \
}

PRINT_TERMFILE_S_(int, d)
PRINT_TERMFILE_S_(long, ld)
PRINT_TERMFILE_S_(string, s)

#ifdef FULLTYPES
PRINT_TERMFILE_S_(short, hd)
PRINT_TERMFILE_S_(byte, x)
PRINT_TERMFILE_S_(longlong, lld)
PRINT_TERMFILE_S_(ushort, hu)
PRINT_TERMFILE_S_(ubyte, X)
PRINT_TERMFILE_S_(uint, u)
PRINT_TERMFILE_S_(ulong, lu)
PRINT_TERMFILE_S_(ulonglong, llu)
#endif /* FULLTYPES */

void print(char c)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" '%c'\n", c);
}

inline void print(float n)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %g\n", tod(n));
}

inline void print(float n, int prec)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %.*g\n", prec, tod(n));
}

inline void print(double n)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %g\n", n);
}

inline void print(double n, int prec)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %.*g\n", prec, n);
}

inline void print(bool n)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %s\n", n ? "true" : "false");
}

inline void print(bool n, int mode)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  if (n)
  {
     if (mode==2)
     {
	TermFile::printf(" true\n");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::printf(" t\n");
       }
       else
       {
	 TermFile::printf(" 1\n");
       }
     }
  }
  else
  {
     if (mode==2)
     {
	TermFile::printf(" false\n");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::printf(" f\n");
       }
       else
       {
	 TermFile::printf(" 0\n");
       }
     }
  }
}

#define FSCAN_FILE_S_(typ, format)                   \
inline bool, typ fscan##typ (File &stream)           \
{                                                    \
  typ result;                                        \
  success, result = File::fscanf(stream, QUOTE(%format));\
  return (success==1, result);                       \
}

FSCAN_FILE_S_(int, d)
FSCAN_FILE_S_(long, ld)
FSCAN_FILE_S_(float, f)
FSCAN_FILE_S_(double, lf)
FSCAN_FILE_S_(char, c)

#ifdef FULLTYPES
FSCAN_FILE_S_(short, hd)
FSCAN_FILE_S_(longlong, Ld)
FSCAN_FILE_S_(ushort, hu)
FSCAN_FILE_S_(uint, u)
FSCAN_FILE_S_(ulong, lu)
FSCAN_FILE_S_(ulonglong, Lu)
#endif /* FULLTYPES */

inline bool, bool fscanbool(File &stream)
{
  bool result;
  char c;

  success, c=File::fscanf(stream, "%c");

  if (success==1)
  {
    if ((c=='0') || (c=='f'))
    {
      result=false;
    }
    else
    {
      result=true;
    }
  }
  else
  {
     success=0;
     result=false;
  }

  return(success==1, result);
}

inline bool, string fscanstring(File &stream, int length)
{
  string result;
  result=File::fscans(stream, length);
  return(strlen(result)>0, result);
}

#define FSCAN_TERMFILE_S_(typ, format)               \
inline bool, typ fscan##typ (TermFile &stream)       \
{                                                    \
  typ result;                                        \
  success, result = TermFile::fscanf(stream, QUOTE(%format));\
  return (success==1, result);                       \
}

FSCAN_TERMFILE_S_(int, d)
FSCAN_TERMFILE_S_(long, ld)
FSCAN_TERMFILE_S_(float, f)
FSCAN_TERMFILE_S_(double, lf)
FSCAN_TERMFILE_S_(char, c)

#ifdef FULLTYPES
FSCAN_TERMFILE_S_(short, hd)
FSCAN_TERMFILE_S_(longlong, Ld)
FSCAN_TERMFILE_S_(ushort, hu)
FSCAN_TERMFILE_S_(uint, u)
FSCAN_TERMFILE_S_(ulong, lu)
FSCAN_TERMFILE_S_(ulonglong, Lu)
#endif /* FULLTYPES */

inline bool, bool fscanbool(TermFile &stream)
{
  bool result;
  char c;

  success, c=TermFile::fscanf(stream, "%c");

  if (success==1)
  {
    if ((c=='0') || (c=='f'))
    {
      result=false;
    }
    else
    {
      result=true;
    }
  }
  else
  {
     success=0;
     result=false;
  }

  return(success==1, result);
}

inline bool, string fscanstring(TermFile &stream, int length)
{
  string result;

  result=TermFile::fscans(stream, length);
  return(strlen(result)>0, result);
}

#define SCAN_S_(typ, format)                         \
inline bool, typ scan##typ ()                        \
{                                                    \
  typ result;                                        \
  success, result = TermFile::scanf(QUOTE(%format)); \
  return (success==1, result);                       \
}

SCAN_S_(int, d)
SCAN_S_(long, ld)
SCAN_S_(float, f)
SCAN_S_(double, lf)
SCAN_S_(char, c)

#ifdef FULLTYPES
SCAN_S_(short, hd)
SCAN_S_(longlong, Ld)
SCAN_S_(ushort, hu)
SCAN_S_(uint, u)
SCAN_S_(ulong, lu)
SCAN_S_(ulonglong, Lu)
#endif /* FULLTYPES */

inline bool, bool scanbool()
{
  bool result;
  char c;

  success, c=TermFile::scanf("%c");

  if (success==1)
  {
    if ((c=='0') || (c=='f'))
    {
      result=false;
    }
    else
    {
      result=true;
    }
  }
  else
  {
     success=0;
     result=false;
  }

  return(success==1, result);
}

inline bool, string scanstring(int length)
{
  string result;

  result=TermFile::scans(length);
  return(strlen(result)>0, result);
}
