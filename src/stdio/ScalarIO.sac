module ScalarIO;


use IOresources: all;
use String : { string, to_string, strlen };
use ScalarArith : all;
use ArrayFormat: all;
use TermFile: {TermFile};

export all;



/*****************************************************************/

inline void fprint(File &stream, int n)
{
  File::fprintf(stream, "%d", n);
}


/*****************************************************************/

inline void fprint(File &stream, float n)
{
  File::fprintf(stream, "%g", n);
}


/*****************************************************************/

inline void fprint(File &stream, float n, int prec)
{
  File::fprintf(stream, "%.*g", prec, n);
}


/*****************************************************************/

inline void fprint(File &stream, double n)
{
  File::fprintf(stream, "%g", n);
}


/*****************************************************************/

inline void fprint(File &stream, double n, int prec)
{
  File::fprintf(stream, "%.*g", prec, n);
}


/*****************************************************************/

void fprint(File &stream, bool n)
{
  if (n)
  {
    File::fprintf(stream, "1");
  }
  else
  {
    File::fprintf(stream, "0");
  }
}


/*****************************************************************/

void fprint(File &stream, bool n, int mode)
{
  if (n)
  {
     if (mode==2)
     {
	File::fprintf(stream, "true");
     }
     else
     {
       if (mode==1)
       {
	 File::fprintf(stream, "t");
       }
       else
       {
	 File::fprintf(stream, "1");
       }
     }
  }
  else
  {
     if (mode==2)
     {
	File::fprintf(stream, "false");
     }
     else
     {
       if (mode==1)
       {
	 File::fprintf(stream, "f");
       }
       else
       {
	 File::fprintf(stream, "0");
       }
     }
  }
}


/*****************************************************************/

inline void fprint(File &stream, char c)
{
  File::fprintf(stream, "%c", c);
}


/*****************************************************************/

inline void fprint(File &stream, string s)
{
  File::fprintf(stream, "%s", s);
}



/*****************************************************************/
/*****************************************************************/



inline void fprint(TermFile &stream, int n)
{
  TermFile::fprintf(stream, "%d", n);
}


/*****************************************************************/

inline void fprint(TermFile &stream, float n)
{
  TermFile::fprintf(stream, "%g", n);
}


/*****************************************************************/

inline void fprint(TermFile &stream, float n, int prec)
{
  TermFile::fprintf(stream, "%.*g", prec, n);
}


/*****************************************************************/

inline void fprint(TermFile &stream, double n)
{
  TermFile::fprintf(stream, "%g", n);
}


/*****************************************************************/

inline void fprint(TermFile &stream, double n, int prec)
{
  TermFile::fprintf(stream, "%.*g", prec, n);
}


/*****************************************************************/

void fprint(TermFile &stream, bool n)
{
  if (n)
  {
    TermFile::fprintf(stream, "1");
  }
  else
  {
    TermFile::fprintf(stream, "0");
  }
}


/*****************************************************************/

void fprint(TermFile &stream, bool n, int mode)
{
  if (n)
  {
     if (mode==2)
     {
	TermFile::fprintf(stream, "true");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::fprintf(stream, "t");
       }
       else
       {
	 TermFile::fprintf(stream, "1");
       }
     }
  }
  else
  {
     if (mode==2)
     {
	TermFile::fprintf(stream, "false");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::fprintf(stream, "f");
       }
       else
       {
	 TermFile::fprintf(stream, "0");
       }
     }
  }
}


/*****************************************************************/

inline void fprint(TermFile &stream, char c)
{
  TermFile::fprintf(stream, "%c", c);
}


/*****************************************************************/

inline void fprint(TermFile &stream, string s)
{
  TermFile::fprintf(stream, "%s", s);
}



/*****************************************************************/
/*****************************************************************/

void show(bool c)
{
  TermFile::printf("%s\n", to_string( format(c)));
}

/*****************************************************************/

void show(int c)
{
  TermFile::printf("%s\n", to_string( format(c)));
}

/*****************************************************************/

void show(float c)
{
  TermFile::printf("%s\n", to_string( format(c)));
}

/*****************************************************************/

void show(double c)
{
  TermFile::printf("%s\n", to_string( format(c)));
}

/*****************************************************************/

void show(char c)
{
  TermFile::printf("%c\n", c);
}

/*****************************************************************/

void show(ulonglong c)
{
  TermFile::printf("%llu\n", c);
}

/*****************************************************************/
/*****************************************************************/



void print(int n)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %d\n", n);
}


/*****************************************************************/

void print(float n)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %g\n", n);
}


/*****************************************************************/

void print(float n, int prec)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %.*g\n", prec, n);
}


/*****************************************************************/

void print(double n)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %g\n", n);
}


/*****************************************************************/

void print(double n, int prec)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" %.*g\n", prec, n);
}


/*****************************************************************/

void print(bool n)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  if (n)
  {
    TermFile::printf(" true\n");
  }
  else
  {
    TermFile::printf(" false\n");
  }
}


/*****************************************************************/

void print(bool n, int mode)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  if (n)
  {
     if (mode==2)
     {
	TermFile::printf(" true\n");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::printf(" t\n");
       }
       else
       {
	 TermFile::printf(" 1\n");
       }
     }
  }
  else
  {
     if (mode==2)
     {
	TermFile::printf(" false\n");
     }
     else
     {
       if (mode==1)
       {
	 TermFile::printf(" f\n");
       }
       else
       {
	 TermFile::printf(" 0\n");
       }
     }
  }
}


/*****************************************************************/

void print(char c)
{
  TermFile::printf("Dimension:  0\nShape    : < >\n");
  TermFile::printf(" '%c'\n", c);
}




/*****************************************************************/
/*****************************************************************/
/*****************************************************************/

inline bool, int fscanint(File &stream)
{
  int result;

  result=0;
  success, result=File::fscanf(stream, "%d");
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, float fscanfloat(File &stream)
{
  float result;

  result=0.0f;
  success, result=File::fscanf(stream, "%f");
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, double fscandouble(File &stream)
{
  double result;
  
  result=0.0d;
  success, result=File::fscanf(stream, "%lf");
  
  return(success==1, result);
}


/*****************************************************************/

bool, bool fscanbool(File &stream)
{
  bool result;
  char c;
  
  success, c=File::fscanf(stream, "%c");
  
  if (success==1)
  {
    if ((c=='0') || (c=='f'))
    {
      result=false;
    }
    else
    {
      result=true;
    }
  }
  else
  {
     success=0;
     result=false;
  }
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, char fscanchar(File &stream)
{
  char result;
  
  success, result=File::fscanf(stream, "%c");
  
  return(success==1, result);
}



/*****************************************************************/

inline bool, string fscanstring(File &stream, int length)
{
  string result;
  
  result=File::fscans(stream, length);
    
  return(strlen(result)>0, result);
}



/*****************************************************************/
/*****************************************************************/



inline bool, int fscanint(TermFile &stream)
{
  int result;

  result=0;
  success, result=TermFile::fscanf(stream, "%d");
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, float fscanfloat(TermFile &stream)
{
  float result;

  result=0.0f;
  success, result=TermFile::fscanf(stream, "%f");
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, double fscandouble(TermFile &stream)
{
  double result;
  
  result=0.0d;
  success, result=TermFile::fscanf(stream, "%lf");
  
  return(success==1, result);
}


/*****************************************************************/

bool, bool fscanbool(TermFile &stream)
{
  bool result;
  char c;
  
  success, c=TermFile::fscanf(stream, "%c");
  
  if (success==1)
  {
    if ((c=='0') || (c=='f'))
    {
      result=false;
    }
    else
    {
      result=true;
    }
  }
  else
  {
     success=0;
     result=false;
  }
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, char fscanchar(TermFile &stream)
{
  char result;
  
  success, result=TermFile::fscanf(stream, "%c");
  
  return(success==1, result);
}



/*****************************************************************/

inline bool, string fscanstring(TermFile &stream, int length)
{
  string result;
  
  result=TermFile::fscans(stream, length);
    
  return(strlen(result)>0, result);
}



/*****************************************************************/
/*****************************************************************/



inline bool, int scanint()
{
  int result;

  result=0;
  success, result=TermFile::scanf("%d");
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, float scanfloat()
{
  float result;

  result=0.0f;
  success, result=TermFile::scanf("%f");
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, double scandouble()
{
  double result;
  
  result=0.0d;
  success, result=TermFile::scanf("%lf");
  
  return(success==1, result);
}


/*****************************************************************/

bool, bool scanbool()
{
  bool result;
  char c;
  
  success, c=TermFile::scanf("%c");
  
  if (success==1)
  {
    if ((c=='0') || (c=='f'))
    {
      result=false;
    }
    else
    {
      result=true;
    }
  }
  else
  {
     success=0;
     result=false;
  }
  
  return(success==1, result);
}


/*****************************************************************/

inline bool, char scanchar()
{
  char result;
  
  success, result=TermFile::scanf("%c");
  
  return(success==1, result);
}



/*****************************************************************/

inline bool, string scanstring(int length)
{
  string result;
  
  result=TermFile::scans(length);
    
  return(strlen(result)>0, result);
}


/*****************************************************************/
/*****************************************************************/



