module PPM;

use Color8: { color, shape };
use String: { string };
use ScalarArith: { == };

export {readPPM, printPPM};

external color[.,.] readArray( string name );
#pragma effect FileSystem::TheFileSystem
#pragma linkobj "src/PPM/ppm2array.o"
#pragma linkname "SAC_PPM_ppm2array"
#pragma refcounting[0]

external void writeArray( string name, color[.,.] image, int[2] shape, int ascii);
#pragma effect FileSystem::TheFileSystem
#pragma linkobj "src/PPM/array2ppm.o"
#pragma linkname "SAC_PPM_array2ppm"

inline
void printPPM( color[.,.] img)
{
  writeArray( "stdout", img, shape(img), 1);
}

inline
void printPPM( color[.,.] img, string name, bool binary)
{
  if ( binary == true) {
    writeArray( name, img, shape(img), 0);
  } else {
    writeArray( name, img, shape(img), 1);
  }
}

inline
color[.,.] readPPM()
{
  return ( readArray( "stdin"));
}

inline
color[.,.] readPPM( string name)
{
  return ( readArray( name));
}

