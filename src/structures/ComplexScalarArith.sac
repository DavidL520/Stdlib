module ComplexScalarArith;

export all;

use Array : { sel, &, | };
use ComplexBasics: all;


  /*  Binary operations on complex numbers.  */

  
inline complex + (complex X1, complex X2)
{
  return((:complex)[((:double[2])X1)[[0]] ScalarArith::+ ((:double[2])X2)[[0]], 
                    ((:double[2])X1)[[1]] ScalarArith::+ ((:double[2])X2)[[1]]]);
}
			 
inline complex - (complex X1, complex X2)
{
  return((:complex)[((:double[2])X1)[[0]] ScalarArith::- ((:double[2])X2)[[0]],
                    ((:double[2])X1)[[1]] ScalarArith::- ((:double[2])X2)[[1]]]);
}


inline complex * (complex X1, complex X2)
{
  return((:complex)[((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[0]] 
                    ScalarArith::- ((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[1]],
                    ((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[1]] 
                    ScalarArith::+ ((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[0]]]);
}

inline complex / (complex X1, complex X2)
{
  Z = ((:double[2])X2)[[0]] ScalarArith::* ((:double[2])X2)[[0]] 
      ScalarArith::+ ((:double[2])X2)[[1]] ScalarArith::* ((:double[2])X2)[[1]];
  
  return((:complex)[(((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[0]]
                      ScalarArith::+ ((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[1]])
                    ScalarArith::/ Z,
                    (((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[0]]
                      ScalarArith::- ((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[1]])
                    ScalarArith::/ Z]);
}

  /*  Functions for specific complex manipulations. */

  
inline complex conj(complex X)
{
  return((:complex)[((:double[2])X)[[0]], (0d ScalarArith::- 1.0d) ScalarArith::* ((:double[2])X)[[1]]]);
}


inline double abs(complex X)
{
  return(Math::sqrt(((:double[2])X)[[0]] ScalarArith::* ((:double[2])X)[[0]]
              ScalarArith::+ ((:double[2])X)[[1]] ScalarArith::* ((:double[2])X)[[1]]));
}


/* relational operations */

inline bool == (complex X1, complex X2)
{
  return((((:double[2])X1)[[0]] ScalarArith::== ((:double[2])X2)[[0]]) 
         & (((:double[2])X1)[[1]] ScalarArith::== ((:double[2])X2)[[1]]));
}


inline bool != (complex X1, complex X2)
{
  return((((:double[2])X1)[[0]] ScalarArith::!= ((:double[2])X2)[[0]])
         | (((:double[2])X1)[[1]] ScalarArith::!= ((:double[2])X2)[[1]]));
}



