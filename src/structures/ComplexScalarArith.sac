module ComplexScalarArith;

export all;

use Array : { sel, &, | };
use ComplexBasics: all;


inline complex zero( complex[*] a)
{
  return( toc( 0,0));
}

inline complex one( complex[*] a)
{
  return( toc( 1,0));
}

  /*  Binary operations on complex numbers.  */

  
inline complex + (complex X1, complex X2)
{
  return((:complex)[((:double[2])X1)[[0]] ScalarArith::+ ((:double[2])X2)[[0]], 
                    ((:double[2])X1)[[1]] ScalarArith::+ ((:double[2])X2)[[1]]]);
}
			 
inline complex - (complex X1, complex X2)
{
  return((:complex)[((:double[2])X1)[[0]] ScalarArith::- ((:double[2])X2)[[0]],
                    ((:double[2])X1)[[1]] ScalarArith::- ((:double[2])X2)[[1]]]);
}


inline complex - (complex X1)
{
  return((:complex)[ ScalarArith::-(((:double[2])X1)[[0]]),
                     ScalarArith::-(((:double[2])X1)[[1]]) ]);
}

inline complex * (complex X1, complex X2)
{
  return((:complex)[((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[0]] 
                    ScalarArith::- ((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[1]],
                    ((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[1]] 
                    ScalarArith::+ ((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[0]]]);
}

inline complex / (complex X1, complex X2)
{
  Z = ((:double[2])X2)[[0]] ScalarArith::* ((:double[2])X2)[[0]] 
      ScalarArith::+ ((:double[2])X2)[[1]] ScalarArith::* ((:double[2])X2)[[1]];
  
  return((:complex)[(((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[0]]
                      ScalarArith::+ ((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[1]])
                    ScalarArith::/ Z,
                    (((:double[2])X1)[[1]] ScalarArith::* ((:double[2])X2)[[0]]
                      ScalarArith::- ((:double[2])X1)[[0]] ScalarArith::* ((:double[2])X2)[[1]])
                    ScalarArith::/ Z]);
}

  /*  Functions for specific complex manipulations. */

  
inline complex conj(complex X)
{
  return((:complex)[((:double[2])X)[[0]], (0d ScalarArith::- 1.0d) ScalarArith::* ((:double[2])X)[[1]]]);
}


inline complex abs(complex X)
{
  real = Math::sqrt(((:double[2])X)[[0]] ScalarArith::* ((:double[2])X)[[0]]
           ScalarArith::+ ((:double[2])X)[[1]] ScalarArith::* ((:double[2])X)[[1]]);
  return( (:complex[*])[real, 0d]);
}


/* relational operations */

inline bool == (complex X1, complex X2)
{
  return((((:double[2])X1)[[0]] ScalarArith::== ((:double[2])X2)[[0]]) 
         & (((:double[2])X1)[[1]] ScalarArith::== ((:double[2])X2)[[1]]));
}


inline bool != (complex X1, complex X2)
{
  return((((:double[2])X1)[[0]] ScalarArith::!= ((:double[2])X2)[[0]])
         | (((:double[2])X1)[[1]] ScalarArith::!= ((:double[2])X2)[[1]]));
}


inline bool < (complex X1, complex X2)
{
  return( real( abs(X1)) ScalarArith::< real( abs( X2)));
}

inline bool <= (complex X1, complex X2)
{
  return( real( abs(X1)) ScalarArith::<= real( abs( X2)));
}

inline bool > (complex X1, complex X2)
{
  return( real( abs(X1)) ScalarArith::> real( abs( X2)));
}

inline bool >= (complex X1, complex X2)
{
  return( real( abs(X1)) ScalarArith::>= real( abs( X2)));
}

inline complex min( complex X1, complex X2)
{
  return( X1 <= X2 ? X1: X2);
}

inline complex max( complex X1, complex X2)
{
  return( X1 >= X2 ? X1: X2);
}
