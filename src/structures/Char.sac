module Char;

use ArrayBasics: {shape, sel};
export all;

#include "Templates.mac"

external bool isalpha  (char C);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisalpha"
external bool isupper  (char C);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisupper"
external bool islower  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACislower"
external bool isdigit  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisdigit"
external bool isxdigit (char C);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisxdigit"
external bool isspace  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisspace"
external bool ispunct  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACispunct"
external bool isalnum  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisalnum"
external bool isprint  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisprint"
external bool isgraph  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisgraph"
external bool iscntrl  (char C); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACiscntrl"

    /* The above functions test characters of being in a specific range,
       e.g. in the range of digits, letters, or lower case letters. */


external bool isascii (int N); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACisascii"
external char toascii (int N); 
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACtoascii"

    /* These functions test an integer value for being in the range of the
       ASCII character set or convert an integer value into an ASCII
       character, respectively. */


external char tolower (char C);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACtolower"
external char toupper (char C);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/ctype.o"
    #pragma linkname "SACtoupper"

    /* These functions convert upper case letters into lower case letters
       and vice versa. */

external char tochar( int N);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/Char.o"
    #pragma linkname "tochar_int"
external char tochar( long N);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/Char.o"
    #pragma linkname "tochar_long"
external char tochar( float N);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/Char.o"
    #pragma linkname "tochar_float"
external char tochar( double N);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/Char.o"
    #pragma linkname "tochar_double"
external char tochar( char N);
    #pragma linksign[ 0, 1]
    #pragma linkobj "src/Char/Char.o"
    #pragma linkname "tochar_char"

// These functions convert numerical values into a char (byte) value
//
#define TOCHAR( typ)                                 \
inline                                               \
char[*] tochar( typ[+] a)                            \
{                                                    \
  res = with {                                       \
          ( . <= iv <= . ) : _toc_S_( a[iv] );      \
        } : genarray( shape(a), ' ' );               \
                                                     \
  return( res);                                      \
}

BUILT_IN( TOCHAR)


