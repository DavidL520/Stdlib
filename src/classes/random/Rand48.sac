class Rand48;


    /*
     *  Class Rand48 provides a pseudo-random number generator which uses the
     *  linear congruential algorithm and  48-bit  integer 
     *  arithmetic.
     */


external classtype;

export all;

objdef Rand48 RandomGen = randGen();

external Rand48 randGen();
    #pragma linksign [0]
    #pragma linkname "create_Rand48Gen"
    #pragma linkobj  "src/Rand48/Rand48.o"


external void srandom(int SEED);
    #pragma effect Rand48::RandomGen
    #pragma linkname "srand48"
    #pragma linkobj  "src/Rand48/Rand48.o"

    /*
     * Initialize RandomGen to produce a new sequence of pseudo-random
     * numbers.
     */


external int random(int MIN, int MAX);
    #pragma linksign [0,1,2]
    #pragma effect Rand48::RandomGen
    #pragma linkname "SACrand48"
    #pragma linkobj  "src/Rand48/Rand48.o"

    /*
     * Use RandomGen to generate a new pseudo-random integer in the range
     * MIN to MAX.
     */


external double random(double MIN, double MAX);
    #pragma linksign [0,1,2]
    #pragma effect Rand48::RandomGen
    #pragma linkname "SACdrand48"
    #pragma linkobj  "src/Rand48/Rand48.o"

    /*
     * Use RandomGen to generate a new pseudo-random double precision
     * floating-point number in the interval [MIN, MAX).
     */


external int[+] random(int SIZE, int MIN, int MAX);
    #pragma refcounting [0]
    #pragma effect Rand48::RandomGen
    #pragma linkname "SACrand48array"
    #pragma linkobj  "src/Rand48/Rand48.o"

external double[+] random(int SIZE, double MIN, double MAX);
    #pragma refcounting [0]
    #pragma effect Rand48::RandomGen
    #pragma linkname "SACdrand48array"
    #pragma linkobj  "src/Rand48/Rand48.o"

    /*
     * Use RandomGen to generate an array of size SIZE 
     * of pseudo-random numbers.
     */






