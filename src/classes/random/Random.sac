class Random;

    /*
     *  Class Random provides a non-linear additive feedback
     *  random number generator employing a default table of size
     *  31 long integers to return successive  pseudo-random  num-
     *  bers  in the range from 0 to rand_max().  The period of this
     *  random  number  generator  is  very  large,  approximately
     *  16*((2**31)-1).
     *
     *  This random number generator offers much better results than
     *  that of class Rand but is also about 2/3 slower. 
     */

external classtype;

export all;

external objdef Random RandomGen;



external void srandom(int SEED);
    #pragma effect Random::RandomGen
    #pragma linkobj "src/Random/Random.o"

    /*
     * Initialize RandomGen to produce a new sequence of pseudo-random
     * numbers.
     */


external int random(int MIN, int MAX);
    #pragma linksign [0,1,2]
    #pragma effect Random::RandomGen
    #pragma linkname "SACrandom"
    #pragma linkobj "src/Random/Random.o"

    /*
     * Use RandomGen to generate a new pseudo-random integer in the range
     * MIN to MAX.
     */


external double random(double MIN, double MAX);
    #pragma linksign [0,1,2]
    #pragma effect Random::RandomGen
    #pragma linkname "SACdrandom"
    #pragma linkobj "src/Random/Random.o"

    /*
     * Use RandomGen to generate a new pseudo-random double precision
     * floating-point number in the interval [MIN, MAX).
     */

int[*] random( int[.] shp, int MIN, int MAX)
{
  res = with( iv)
          ( . <= iv <= .) : random( MIN, MAX);
        genarray( shp, 0);
  return( res);
}

double[*] random( int[.] shp, double MIN, double MAX)
{
  res = with( iv)
          ( . <= iv <= .) : random( MIN, MAX);
        genarray( shp, 0d);
  return( res);
}

