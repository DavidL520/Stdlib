/*****************************************************************************
 *
 * file:   Hiding.sac
 *
 * description:
 *
 *   This module is for hiding type information.
 *   It is commonly used for static inputs and is intentioned for benchmarking.
 *
 *   Some functions take a single argument and hide the value, shape or 
 *   dimensionality information of the input. Others in addition take an
 *   integer. This allows for calls to inlined kernel functions in a loop 
 *   where where the call must be repeated N times for benchmarking.
 *   Here is an example:
 *      for( i=0 ; i < N ; i}}) {
 *        res[[i]] = kernel( hideValue( ip1, i), hideValue( ip2, i), ...);
 *      }
 *   The above code computes kernel N times even if kernel is inlined.
 *
 *****************************************************************************/

module Hiding;

export all;

use Array: all;

/*
 * AKV -> AKS
 * AKS -> AKS
 * AKD -> AKD
 * AUD -> AUD
 * SCALAR -> SCALAR
 */
#define HIDEVALUE( TYPE)                                  \
inline                                                    \
TYPE[n:shp] hideValue( TYPE[n:shp] in)                    \
{                                                         \
  return( _hideValue_SxA_( 0, in));                       \
}                                                         \
inline                                                    \
TYPE[n:shp] hideValue( TYPE[n:shp] in, int i)             \
{                                                         \
  return( _hideValue_SxA_( i, in));                       \
}                                                         
HIDEVALUE( int)
HIDEVALUE( char)
HIDEVALUE( float)
HIDEVALUE( double)
HIDEVALUE( bool)

/*
 * AKV -> AKD
 * AKS -> AKD
 * AKD -> AKD
 * AUD -> AUD
 * SCALAR -> SCALAR
 */
#define HIDESHAPE( TYPE)                               \
inline                                                 \
TYPE[n:shp] hideShape( TYPE[n:shp] in)                 \
{                                                      \
  return( _hideShape_SxA_( 0, in));                    \
}                                                      \
inline                                                 \
TYPE[n:shp] hideShape( TYPE[n:shp] in, int i)          \
{                                                      \
  return( _hideShape_SxA_( i, in));                    \
}
HIDESHAPE( int)
HIDESHAPE( char)
HIDESHAPE( float)
HIDESHAPE( double)
HIDESHAPE( bool)

/*
 * AKV -> AUD
 * AKS -> AUD
 * AKD -> AUD
 * AUD -> AUD
 * SCALAR -> AUD
 */
#define HIDEDIM( TYPE)                                 \
inline                                                 \
TYPE[n:shp] hideDim( TYPE[n:shp] in)                   \
{                                                      \
  return( _hideDim_SxA_( 0, in));                      \
}                                                      \
inline                                                 \
TYPE[n:shp] hideDim( TYPE[n:shp] in, int i)            \
{                                                      \
  return( _hideDim_SxA_( i, in));                      \
}
HIDEDIM( int)
HIDEDIM( char)
HIDEDIM( float)
HIDEDIM( double)
HIDEDIM( bool)

